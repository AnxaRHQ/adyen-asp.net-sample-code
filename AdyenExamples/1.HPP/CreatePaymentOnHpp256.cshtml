@using System.IO.Compression
@using System.Security.Cryptography;
@using System.Text


@*
    * Create Payment On Hosted Payment Page (HPP)
    *
    * The Adyen Hosted Payment Pages (HPPs) provide a flexible, secure and easy way to allow shoppers to pay for goods or
    * services. By submitting the form generated by this servlet to our HPP a payment will be created for the shopper.
    *
    * @link /1.HPP/CreatePaymentOnHpp.cshtml
    * @author Created by Adyen - Payments Made Easy
    
*@
@{
    /**
     * General HPP settings
     * - hppUrl: URL of the Adyen HPP to submit the form to
     * - hmacKey: shared secret key used to encrypt the signature
     *
     * Both variables are dependent on the environment which should be used (Test/Live).
     * HMAC key can be set up: Adyen CA >> Skins >> Choose your Skin >> Edit Tab >> Edit HMAC key for Test & Live.
     */
    string hppUrl = "https://test.adyen.com/hpp/pay.shtml";
    string hmacKey = "YourHmacSecretKey";

    /**
     * Defining variables
     * The HPP requires certain variables to be posted in order to create a payment possibility for the shopper.
     *
     * The variables that you can post to the HPP are the following:
     *
     * merchantReference    : Your reference for this payment.
     * paymentAmount        : The transaction amount in minor units (e.g. EUR 1,00 = 100).
     * currencyCode         : The three character ISO currency code.
     * shipBeforeDate       : The date by which the goods or services specifed in the order must be shipped.
     *                        Format: YYYY-MM-DD
     * skinCode             : The code of the skin to be used for the payment.
     * merchantAccount      : The merchant account for which you want to process the payment.
     * sessionValidity      : The time by which a payment needs to have been made.
     *                        Format: YYYY-MM-DDThh:mm:ssTZD
     * shopperLocale        : A combination of language code and country code used to specify the language to be
     *                        used in the payment session (e.g. en_GB).
     * orderData            : A fragment of HTML/text that will be displayed on the HPP. (optional)
     * countryCode          : Country code according to ISO_3166-1_alpha-2 standard. (optional)
     * shopperEmail         : The shopper's email address. (recommended)
     * shopperReference     : An ID that uniquely identifes the shopper, such as a customer id. (recommended)
     * allowedMethods       : A comma-separated list of allowed payment methods, i.e. "ideal,mc,visa". (optional)
     * blockedMethods       : A comma-separated list of blocked payment methods, i.e. "ideal,mc,visa". (optional)
     * offset               : An integer that is added to the normal fraud score. (optional)
     * merchantSig          : The HMAC signature used by Adyen to test the validy of the form.
     */
    string merchantReference = "TEST-PAYMENT-" + DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss");
    string paymentAmount = "199";
    string currencyCode = "EUR";
    string shipBeforeDate = DateTime.Now.AddDays(3).ToString("yyyy-MM-dd");
    string skinCode = "YourSkinCode";
    string merchantAccount = "YourMerchantAccount";
    string sessionValidity = DateTime.Now.AddDays(1).ToString("yyyy-MM-ddTHH:mm:ssK");
    string shopperLocale = "en_US";
    string orderData = CompressString("Orderdata to display on the HPP can be put here");
    string countryCode = "NL";
    string shopperEmail = "";
    string shopperReference = "";
    string allowedMethods = "";
    string blockedMethods = "";
    string offset = "";

    /**
     * Signing the form
     *
     * The merchant signature is used by Adyen to verify if the posted data is not altered by the shopper. The
     * signature must be encrypted according to the procedure below.
     *
     * Please note: You will need to add all parameters that you post to this list in order for the signature to be correct.
     */
    Dictionary<string, string> paramlist = new Dictionary<string, string>();

	paramlist.Add("currencyCode", currencyCode);
	paramlist.Add("merchantAccount", merchantAccount);
	paramlist.Add("merchantReference", merchantReference);	
	paramlist.Add("paymentAmount", paymentAmount);
	paramlist.Add("sessionValidity", sessionValidity);
	paramlist.Add("shipBeforeDate", shipBeforeDate);
	paramlist.Add("shopperLocale", shopperLocale);
	paramlist.Add("skinCode", skinCode);
	paramlist.Add("countryCode", countryCode);
	paramlist.Add("shopperEmail", shopperEmail);
	paramlist.Add("shopperReference", shopperReference);
	paramlist.Add("allowedMethods", allowedMethods);
	paramlist.Add("blockedMethods", blockedMethods);
	paramlist.Add("offset", offset);
    
    //add custom data as JSON in the orderData field
    List<CustomField> list = new List<CustomField>();   
    list.Add(new CustomField("myVal1", "FOO"));
    list.Add(new CustomField("myVal2", "BAR"));   

    JsonEncoder encoder = new JsonEncoder(list);
    var custom = encoder.GetJson();
    paramlist.Add("orderData", custom);

    /*
     * In your skin add elements with id's equal to the names of the custom fields. for instance
     * <span id="myVal1"></span>
     * To decode the data in your skin JS do this:
     *  var orderDataString = decodeURIComponent($("[name='orderData']").val());
        var orderJson = $.parseJSON(orderDataString);      
        $.each(orderJson, function (index, obj) {	              
            if ($("#" + obj.Name) != undefined && obj.Value != undefined && obj.Value !== '') {
                $("#" + obj.Name).html(obj.Value.replace("+", " ").replace("++"," "));  //this decodes spaces, you should do something more clever here!!
            }
        });
     */

    string signingString = BuildSigningString(paramlist);
    string merchantSig = CalculateHMAC(hmacKey, signingString);

}

@functions {
    // Generates GZIP compressed and Base64 encoded string.
    string CompressString(string input)
    {
        byte[] buffer = Encoding.UTF8.GetBytes(input);

        using (var output = new MemoryStream())
        {
            using (var gzip = new GZipStream(output, CompressionMode.Compress))
            {
                gzip.Write(buffer, 0, buffer.Length);
                gzip.Close();
                return Convert.ToBase64String(output.ToArray());
            }
        }
    }
	
	static string EscapeVal(string val)
	{
		if (val == null)
		{
			return string.Empty;
		}

		val = val.Replace(@"\", @"\\");
		val = val.Replace(":", @"\:");
		return val; 
	}

	static string BuildSigningString(IDictionary<string, string> dict)
	{
		Dictionary<string, string> signDict = dict.OrderBy(d => d.Key).ToDictionary(pair => pair.Key, pair => pair.Value);
		string keystring = string.Join(":", signDict.Keys);
		string valuestring = string.Join(":", signDict.Values.Select(EscapeVal));
		return string.Format("{0}:{1}", keystring, valuestring);
	}

     // Computes the Base64 encoded signature using the HMAC algorithm with the HMACSHA256 hashing function.
  	string CalculateHMAC(string hmacKey, string signingstring)
	{
		byte[] key = PackH(hmacKey);
		byte[] data = Encoding.UTF8.GetBytes(signingstring);

		try
		{
			using (HMACSHA256 hmac = new HMACSHA256(key))
			{
				// Compute the hmac on input data bytes
				byte[] rawHmac = hmac.ComputeHash(data);

				// Base64-encode the hmac
				return Convert.ToBase64String(rawHmac);
			}
		}
		catch (Exception e)
		{
			throw new Exception("Failed to generate HMAC : " + e.Message);
		}
	}

	byte[] PackH(string hex)
	{
		if ((hex.Length % 2) == 1)
		{
			hex += '0';
		}

		byte[] bytes = new byte[hex.Length / 2];
		for (int i = 0; i < hex.Length; i += 2)
		{
			bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
		}

		return bytes;
	}
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Adyen - Create Payment On Hosted Payment Page (HPP)</title>
</head>
<body>
    <form method="POST" action="@hppUrl" target="_blank">
        <input type="hidden" name="merchantReference" value="@merchantReference">
        <input type="hidden" name="paymentAmount" value="@paymentAmount">
        <input type="hidden" name="currencyCode" value="@currencyCode">
        <input type="hidden" name="shipBeforeDate" value="@shipBeforeDate">
        <input type="hidden" name="skinCode" value="@skinCode">
        <input type="hidden" name="merchantAccount" value="@merchantAccount">
        <input type="hidden" name="sessionValidity" value="@sessionValidity">
        <input type="hidden" name="shopperLocale" value="@shopperLocale">
        <input type="hidden" name="orderData" value="@orderData">
        <input type="hidden" name="countryCode" value="@countryCode">
        <input type="hidden" name="shopperEmail" value="@shopperEmail">
        <input type="hidden" name="shopperReference" value="@shopperReference">
        <input type="hidden" name="allowedMethods" value="@allowedMethods">
        <input type="hidden" name="blockedMethods" value="@blockedMethods">
        <input type="hidden" name="offset" value="@offset">
        <input type="hidden" name="orderData" value="@orderData">
        <input type="hidden" name="merchantSig" value="@merchantSig">
        <input type="submit" value="Create payment">
    </form>
</body>
</html>
