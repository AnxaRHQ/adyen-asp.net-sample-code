@using Adyen.Services.Payout
@using System.ServiceModel

@*
    * Submit Payout Request (SOAP)
    *
    * You can submit a Payout payment using a specific recurringDetails record, or by using the last created
    * recurringDetails record. This example shows how you can perform such a request using SOAP.
    *
    * Please note: the Payout functionality is set up as a 2-step process. Because of this there are two additional
    * Webservice User accounts needed to use the Payout process. Please request the Payout permission for a specific user
    * account with Adyen Support. The password can be set in Adyen CA >> Settings >> Users.
    *
    * @link /9.Payout/Soap/SubmitPayoutRequest.cshtml
    * @author Created by Adyen - Payments Made Easy
*@

@{
    /**
     * SOAP settings
     * - apiUrl  URL of the Adyen API you are using (Test/Live)
     * - wsUser: your web service user to store Payout details, and to initiate a Payout
     * - wsPassword: your web service user's password
     */
    string apiUrl = "https://pal-test.adyen.com/pal/servlet/soap/Payout";
    string wsUser = "YourWSUser";
    string wsPassword = "YourWSPassword";

    /**
     * Create SOAP client, using generated Service Reference (see App_WebReferences folder).
     * The Service Reference was added in Visual Studio using Website >> Add Service Reference.
     */
    PayoutPortTypeClient client = new PayoutPortTypeClient("PayoutHttpPort", apiUrl);

    // Set HTTP Authentication
    ((BasicHttpBinding)client.Endpoint.Binding).Security.Transport.ClientCredentialType = HttpClientCredentialType.Basic;
    client.ClientCredentials.UserName.UserName = wsUser;
    client.ClientCredentials.UserName.Password = wsPassword;

    /**
     * Initiate a Payout request is done by calling the submit action on the Payout Service with a submit request.
     * The submit request has the following fields:
     * 
     * - recurring
     *     - contract       : The contract value of the recurring object should be present and contain value PAYOUT.
     * - selectedRecurringDetailReference: This is the recurringDetailReference you want to use for this payment.
     *                        You can use the value LATEST to select the most recently used recurring detail.
     * - merchantAccount    : The merchant account you want to process this payout with.
     * - amount
     *     - currencyCode   : The three character ISO currency code.
     *     - value          : The payout amount in minor units (e.g. EUR 1,00 = 100).
     * - reference          : The (merchant) reference for this payout. This reference will be used in all
     *                        communication to the merchant about the status of the payout and the created payment
     *                        (after confirmation of the payout).
     *                        Although it is a good idea to make sure it is unique, this is not a requirement.
     * - shopperEmail       : The email address of the shopper. This does not have to match the email address supplied
     *                        with the initial payment/store details since it may have changed in the mean time.
     * - shopperReference   : The reference to the shopper. This must be the same as the shopperReference used in 
     *                        the initial payment and/or store details call.
     * - shopperStatement   : The description of this payout. This description is shown on the bank statement of
     *                        the shopper (if this is supported by the chosen payment method, optional).
     * - fraudOffset        : A integer that is added to normal fraud score, either positive or negative (optional).
     */

    // Create new submit request
    SubmitRequest submitRequest = new SubmitRequest();
    submitRequest.merchantAccount = "YourMerchantAccount";
    submitRequest.reference = "TEST-PAYOUT-" + DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss");
    submitRequest.shopperEmail = "test@shopper.com";
    submitRequest.shopperReference = "ShopperReference";
    submitRequest.shopperStatement = "ShopperStatement";
    submitRequest.fraudOffset = 0;

    // Set recurring contract
    submitRequest.selectedRecurringDetailReference = "LATEST";

    Recurring recurring = new Recurring();
    recurring.contract = "PAYOUT";
    submitRequest.recurring = recurring;

    // Set amount
    Amount amount = new Amount();
    amount.currency = "EUR";
    amount.value = 1000;
    submitRequest.amount = amount;

    /**
     * Send the submit payout request.
     */
    SubmitResponse submitResult = client.submit(submitRequest);

    /**
     * If the message is syntactically valid and merchantAccount is correct you will receive a submitResponse with
     * the following fields:
     * 
     * - pspReference      : A new reference to uniquely identify this Payout request.
     * - resultCode        : In case of success, this will be [payout-submit-received] or, in case of an error,
     *                       an informational message will be returned.
     * - refusalReason     : In case of refusal, an informational message for the reason.
     * 
     * You should not expect to receive a Notification at this time as it has not yet been confirmed.
     */
    <p><strong>Submit Payout Result</strong></p>
    <ul>
        <li>pspReference: @submitResult.pspReference</li>
        <li>resultCode: @submitResult.resultCode</li>
        <li>refusalReason: @submitResult.refusalReason</li>
    </ul>
}