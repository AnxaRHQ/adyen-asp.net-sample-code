@using Adyen.Services.Payment
@using System.ServiceModel

@*
    * Authorise 3D Secure payment (SOAP)
    *
    * 3D Secure (Verifed by VISA / MasterCard SecureCode) is an additional authentication
    * protocol that involves the shopper being redirected to their card issuer where their
    * identity is authenticated prior to the payment proceeding to an authorisation request.
    *
    * In order to start processing 3D Secure transactions, the following changes are required:
    * 1. Your Merchant Account needs to be confgured by Adyen to support 3D Secure. If you would
    *    like to have 3D Secure enabled, please submit a request to the Adyen Support Team (support@adyen.com).
    * 2. Your integration should support redirecting the shopper to the card issuer and submitting
    *    a second API call to complete the payment.
    *
    * This example demonstrates the second API call to complete the payment using SOAP.
    * See the API Manual for a full explanation of the steps required to process 3D Secure payments.
    *
    * Please note: using our API requires a web service user. Set up your Webservice user:
    * Adyen CA >> Settings >> Users >> ws@Company. >> Generate Password >> Submit
    *
    * @link /2.API/Soap/Authorise3dSecurePayment.cshtml
    * @author Created by Adyen - Payments Made Easy
*@

@{
    /**
     * SOAP settings
     * - apiUrl: URL of the Adyen API you are using (Test/Live)
     * - wsUser: your web service user
     * - wsPassword: your web service user's password
     */
    string apiUrl = "https://pal-test.adyen.com/pal/servlet/soap/Payment";
    string wsUser = "YourWSUser";
    string wsPassword = "YourWSUserPassword";

    /**
     * Create SOAP client, using generated Service Reference (see App_WebReferences folder).
     * The Service Reference was added in Visual Studio using Website >> Add Service Reference.
     */
    PaymentPortTypeClient client = new PaymentPortTypeClient("PaymentHttpPort", apiUrl);

    // Set HTTP Authentication
    ((BasicHttpBinding)client.Endpoint.Binding).Security.Transport.ClientCredentialType = HttpClientCredentialType.Basic;
    client.ClientCredentials.UserName.UserName = wsUser;
    client.ClientCredentials.UserName.Password = wsPassword;

    /**
     * After the shopper's identity is authenticated by the issuer, they will be returned to your
     * site by sending an HTTP POST request to the TermUrl containing the MD parameter and a new
     * parameter called PaRes (see API manual). These will be needed to complete the payment.
     *
     * To complete the payment, a PaymentRequest3d should be submitted to the authorise3d action
     * of the web service. The request should contain the following variables:
     *
     * - merchantAccount: This should be the same as the Merchant Account used in the original authorise request.
     * - browserInfo:     It is safe to use the values from the original authorise request, as they
                          are unlikely to change during the course of a payment.
     * - md:              The value of the MD parameter received from the issuer.
     * - paReponse:       The value of the PaRes parameter received from the issuer.
     * - shopperIP:       The IP address of the shopper. We recommend that you provide this data, as
                          it is used in a number of risk checks, for example, the number of payment
                          attempts and location based checks.
     */

    // Create new payment request
    PaymentRequest3d paymentRequest = new PaymentRequest3d();
    paymentRequest.merchantAccount = "YourMerchantAccount";
    paymentRequest.md = Request.Form["MD"];
    paymentRequest.paResponse = Request.Form["PaRes"];
    paymentRequest.shopperIP = "123.123.123.123";

    // Set browser info
    BrowserInfo browserInfo = new BrowserInfo();
    browserInfo.userAgent = Request.Headers["User-Agent"];
    browserInfo.acceptHeader = Request.Headers["Accept"];

    paymentRequest.browserInfo = browserInfo;

    /**
     * Send the authorise3d request.
     */
    PaymentResult paymentResult = client.authorise3d(paymentRequest);

    /**
     * If the payment passes validation a risk analysis will be done and, depending on the outcome, an authorisation
     * will be attempted. You receive a payment response with the following fields:
     *
     * - pspReference    : Adyen's unique reference that is associated with the payment.
     * - resultCode      : The result of the payment. Possible values: Authorised, Refused, Error or Received.
     * - authCode        : The authorisation code if the payment was successful. Blank otherwise.
     * - refusalReason   : Adyen's mapped refusal reason, populated if the payment was refused.
     */
    <p><strong>Payment Result</strong></p>
    <ul>
        <li>pspReference: @paymentResult.pspReference</li>
        <li>resultCode: @paymentResult.resultCode</li>
        <li>authCode: @paymentResult.authCode</li>
        <li>refusalReason: @paymentResult.refusalReason</li>
    </ul>
}