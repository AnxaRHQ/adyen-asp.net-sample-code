@using Adyen.Services.Payment
@using System.ServiceModel

@*
    * Create Client-Side Encryption Payment (SOAP)
    *
    * Merchants that require more stringent security protocols or do not want the additional overhead of managing their PCI
    * compliance, may decide to implement Client-Side Encryption (CSE). This is particularly useful for Mobile payment
    * flows where only cards are being offered, as it may result in faster load times and an overall improvement to the
    * shopper flow. The Adyen Hosted Payment Page (HPP) provides the most comprehensive level of PCI compliancy and you do
    * not have any PCI obligations. Using CSE reduces your PCI scope when compared to implementing the API without encryption.
    *
    * If you would like to implement CSE, please provide the completed PCI Self Assessment Questionnaire (SAQ) A to the
    * Adyen Support Team (support@adyen.com). The form can be found here:
    * https://www.pcisecuritystandards.org/security_standards/documents.php?category=saqs
    *
    * Please note: using our API requires a web service user. Set up your Webservice user:
    * Adyen CA >> Settings >> Users >> ws@Company. >> Generate Password >> Submit
    *
    * @link /2.API/Soap/CreatePaymentCSE.cshtml
    * @author Created by Adyen - Payments Made Easy
*@

@if (Request.Form["adyen-encrypted-data"] != null)
{
    /**
     * SOAP settings
     * - apiUrl: URL of the Adyen API you are using (Test/Live)
     * - wsUser: your web service user
     * - wsPassword: your web service user's password
     */
    string apiUrl = "https://pal-test.adyen.com/pal/servlet/Payment/v12";
    string wsUser = "YourWSUser";
    string wsPassword = "YourWSPassword";

    /**
     * Create SOAP client, using generated Service Reference (see App_WebReferences folder).
     * The Service Reference was added in Visual Studio using Website >> Add Service Reference.
     */
    PaymentPortTypeClient client = new PaymentPortTypeClient("PaymentHttpPort", apiUrl);

    // Set HTTP Authentication
    ((BasicHttpBinding)client.Endpoint.Binding).Security.Transport.ClientCredentialType = HttpClientCredentialType.Basic;
    client.ClientCredentials.UserName.UserName = wsUser;
    client.ClientCredentials.UserName.Password = wsPassword;

    /**
     * A payment can be submitted by sending a PaymentRequest to the authorise action of the web service.
     * The request should contain the following variables:
     *
     * - merchantAccount           : The merchant account for which you want to process the payment
     * - amount
     *     - currency              : The three character ISO currency code.
     *     - value                 : The transaction amount in minor units (e.g. EUR 1,00 = 100).
     * - reference                 : Your reference for this payment.
     * - shopperIP                 : The shopper's IP address. (recommended)
     * - shopperEmail              : The shopper's email address. (recommended)
     * - shopperReference          : An ID that uniquely identifes the shopper, such as a customer id. (recommended)
     * - fraudOffset               : An integer that is added to the normal fraud score. (optional)
     * - card
     *     - expiryMonth           : The expiration date's month written as a 2-digit string,
     *                               padded with 0 if required (e.g. 03 or 12).
     *     - expiryYear            : The expiration date's year written as in full (e.g. 2016).
     *     - holderName            : The card holder's name, as embossed on the card.
     *     - number                : The card number.
     *     - cvc                   : The card validation code, which is the CVC2 (MasterCard),
     *                               CVV2 (Visa) or CID (American Express).
     *     - billingAddress (recommended)
     *         - street            : The street name.
     *         - houseNumberOrName : The house number (or name).
     *         - city              : The city.
     *         - postalCode        : The postal/zip code.
     *         - stateOrProvince   : The state or province.
     *         - country           : The country in ISO 3166-1 alpha-2 format (e.g. NL).
     */

    // Create new payment request
    PaymentRequest paymentRequest = new PaymentRequest();
    paymentRequest.merchantAccount = "YourMerchantAccount";
    paymentRequest.reference = "TEST-PAYMENT-" + DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss");
    paymentRequest.shopperIP = "123.123.123.123";
    paymentRequest.shopperEmail = "test@example.com";
    paymentRequest.shopperReference = "YourReference";
    paymentRequest.fraudOffset = 0;

    // Set amount
    Amount amount = new Amount();
    amount.currency = "EUR";
    amount.value = 199;
    paymentRequest.amount = amount;

    // Set additional data
    entry encryptedCard = new entry();
    encryptedCard.key = "card.encrypted.json";
    encryptedCard.value = Request.Form["adyen-encrypted-data"];

    anyType2anyTypeMap additionalData = new anyType2anyTypeMap();
    additionalData.Add(encryptedCard);
    paymentRequest.additionalData = additionalData;

    /**
     * Send the authorise request.
     */
    PaymentResult paymentResult = client.authorise(paymentRequest);

    /**
     * If the payment passes validation a risk analysis will be done and, depending on the outcome, an authorisation
     * will be attempted. You receive a payment response with the following fields:
     *
     * - pspReference    : Adyen's unique reference that is associated with the payment.
     * - resultCode      : The result of the payment. Possible values: Authorised, Refused, Error or Received.
     * - authCode        : The authorisation code if the payment was successful. Blank otherwise.
     * - refusalReason   : Adyen's mapped refusal reason, populated if the payment was refused.
     */
    <p><strong>Payment Result</strong></p>
    <ul>
        <li>pspReference: @paymentResult.pspReference</li>
        <li>resultCode: @paymentResult.resultCode</li>
        <li>authCode: @paymentResult.authCode</li>
        <li>refusalReason: @paymentResult.refusalReason</li>
    </ul>
}
else
{
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>Adyen - Client-Side Encryption</title>
    </head>
    <body>
        <form method="POST" action="#handler" target="_blank" id="adyen-encrypted-form">
            <fieldset>
                <legend>Card Details</legend>

                <div class="field">
                    <label for="adyen-encrypted-form-number">
                        Card Number
                        <input type="text" id="adyen-encrypted-form-number" value="5555444433331111" size="20" autocomplete="off" data-encrypted-name="number">
                    </label>
                </div>

                <div class="field">
                    <label for="adyen-encrypted-form-holder-name">
                        Card Holder Name
                        <input type="text" id="adyen-encrypted-form-holder-name" value="John Doe" size="20" autocomplete="off" data-encrypted-name="holderName">
                    </label>
                </div>

                <div class="field">
                    <label for="adyen-encrypted-form-cvc">
                        CVC
                        <input type="text" id="adyen-encrypted-form-cvc" value="737" size="4" autocomplete="off" data-encrypted-name="cvc">
                    </label>
                </div>

                <div class="field">
                    <label for="adyen-encrypted-form-expiry-month">
                        Expiration Month (MM)
                        <input type="text" value="06" id="adyen-encrypted-form-expiry-month" size="2" autocomplete="off" data-encrypted-name="expiryMonth"> /
                    </label>
                    <label for="adyen-encrypted-form-expiry-year">
                        Expiration Year (YYYY)
                        <input type="text" value="2016" id="adyen-encrypted-form-expiry-year" size="4" autocomplete="off" data-encrypted-name="expiryYear">
                    </label>
                </div>

                <div class="field">
                    <input type="hidden" id="adyen-encrypted-form-expiry-generationtime" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssK")" data-encrypted-name="generationtime">
                    <input type="submit" value="Create payment">
                </div>
            </fieldset>
        </form>

        <script type="text/javascript" src="../../js/adyen.encrypt.min.js"></script>
        <script type="text/javascript">
            var form = document.getElementById('adyen-encrypted-form');

            // Put your WS users' CSE key here
            // Adyen CA -> Settings -> Users -> Choose the WS user -> Copy CSE key
            var key = "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE";

            adyen.encrypt.createEncryptedForm(form, key, {});
        </script>
    </body>
    </html>
}