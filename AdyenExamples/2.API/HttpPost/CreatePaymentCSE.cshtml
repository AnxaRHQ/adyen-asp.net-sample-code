@using System.Net.Http;

@*
    * Create Client-Side Encryption Payment (HTTP Post)
    *
    * Merchants that require more stringent security protocols or do not want the additional overhead of managing their PCI
    * compliance, may decide to implement Client-Side Encryption (CSE). This is particularly useful for Mobile payment
    * flows where only cards are being offered, as it may result in faster load times and an overall improvement to the
    * shopper flow. The Adyen Hosted Payment Page (HPP) provides the most comprehensive level of PCI compliancy and you do
    * not have any PCI obligations. Using CSE reduces your PCI scope when compared to implementing the API without encryption.
    *
    * If you would like to implement CSE, please provide the completed PCI Self Assessment Questionnaire (SAQ) A to the
    * Adyen Support Team (support@adyen.com). The form can be found here:
    * https://www.pcisecuritystandards.org/security_standards/documents.php?category=saqs
    *
    * Please note: using our API requires a web service user. Set up your Webservice user:
    * Adyen CA >> Settings >> Users >> ws@Company. >> Generate Password >> Submit
    *
    * @link /2.API/HttpPost/CreatePaymentCSE.cshtml
    * @author Created by Adyen - Payments Made Easy
*@

@if (Request.Form["adyen-encrypted-data"] != null)
{
    /**
     * HTTP Post settings
     * - apiUrl: URL of the Adyen API you are using (Test/Live)
     * - wsUser: your web service user
     * - wsPassword: your web service user's password
     */
    string apiUrl = "https://pal-test.adyen.com/pal/adapter/httppost";
    string wsUser = "YourWSUser";
    string wsPassword = "YourWSPassword";

    /**
     * Create HTTP Client (using Microsoft.Net.Http library) and set up Basic Authentication
     */
    var httpClientHandler = new HttpClientHandler();
    httpClientHandler.Credentials = new NetworkCredential(wsUser, wsPassword);
    var httpClient = new HttpClient(httpClientHandler);

    /**
     * A payment can be submitted with a HTTP Post request to the API, containing the following variables:
     *
     * - action                      : Payment.authorise
     * - paymentRequest
     *   - merchantAccount           : The merchant account for which you want to process the payment
     *   - amount
     *       - currency              : The three character ISO currency code.
     *       - value                 : The transaction amount in minor units (e.g. EUR 1,00 = 100).
     *   - reference                 : Your reference for this payment.
     *   - shopperIP                 : The shopper's IP address. (recommended)
     *   - shopperEmail              : The shopper's email address. (recommended)
     *   - shopperReference          : An ID that uniquely identifes the shopper, such as a customer id. (recommended)
     *   - fraudOffset               : An integer that is added to the normal fraud score. (optional)
     *   - additionalData.card.encrypted.json: The encrypted card catched by the POST variables.
     */
    var values = new List<KeyValuePair<string, string>>
    {
        new KeyValuePair<string, string>("action", "Payment.authorise"),

        new KeyValuePair<string, string>("paymentRequest.merchantAccount", "YourMerchantAccount"),
        new KeyValuePair<string, string>("paymentRequest.reference", "TEST-PAYMENT-" + DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss")),
        new KeyValuePair<string, string>("paymentRequest.shopperIP", "123.123.123.123"),
        new KeyValuePair<string, string>("paymentRequest.shopperEmail", "test@example.com"),
        new KeyValuePair<string, string>("paymentRequest.shopperReference", "YourReference"),
        new KeyValuePair<string, string>("paymentRequest.fraudOffset", "0"),

        new KeyValuePair<string, string>("paymentRequest.amount.currency", "EUR"),
        new KeyValuePair<string, string>("paymentRequest.amount.value", "199"),

        new KeyValuePair<string, string>("paymentRequest.additionalData.card.encrypted.json", Request.Form["adyen-encrypted-data"]),
    };

    /**
     * Send the HTTP Post request with the specified variables.
     */
    HttpResponseMessage response = httpClient.PostAsync(apiUrl, new FormUrlEncodedContent(values)).Result;
    string responseString = response.Content.ReadAsStringAsync().Result;

    /**
     * Keep in mind that you should handle errors correctly.
     * If the Adyen platform does not accept or store a submitted request, you will receive a HTTP response with
     * status code 500 Internal Server Error. The fault string can be found in the responseString.
     */
    if (!response.IsSuccessStatusCode)
    {
        if (response.StatusCode == HttpStatusCode.InternalServerError)
        {
            throw new HttpException((int)response.StatusCode, responseString);
        }
        else
        {
            throw new HttpException((int)response.StatusCode, response.ReasonPhrase);
        }
    }

    /**
     * If the payment passes validation a risk analysis will be done and, depending on the outcome, an authorisation
     * will be attempted. You receive a payment response with the following fields:
     *
     * - pspReference    : Adyen's unique reference that is associated with the payment.
     * - resultCode      : The result of the payment. Possible values: Authorised, Refused, Error or Received.
     * - authCode        : The authorisation code if the payment was successful. Blank otherwise.
     * - refusalReason   : Adyen's mapped refusal reason, populated if the payment was refused.
     */
    var paymentResult = HttpUtility.ParseQueryString(responseString);

    <p><strong>Payment Result</strong></p>
    <ul>
        <li>pspReference: @paymentResult.Get("paymentResult.pspReference")</li>
        <li>resultCode: @paymentResult.Get("paymentResult.resultCode")</li>
        <li>authCode: @paymentResult.Get("paymentResult.authCode")</li>
        <li>refusalReason: @paymentResult.Get("paymentResult.refusalReason")</li>
    </ul>
}
else
{
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>Adyen - Client-Side Encryption</title>
    </head>
    <body>
        <form method="POST" action="#handler" target="_blank" id="adyen-encrypted-form">
            <fieldset>
                <legend>Card Details</legend>

                <div class="field">
                    <label for="adyen-encrypted-form-number">
                        Card Number
                        <input type="text" id="adyen-encrypted-form-number" value="5555444433331111" size="20" autocomplete="off" data-encrypted-name="number">
                    </label>
                </div>

                <div class="field">
                    <label for="adyen-encrypted-form-holder-name">
                        Card Holder Name
                        <input type="text" id="adyen-encrypted-form-holder-name" value="John Doe" size="20" autocomplete="off" data-encrypted-name="holderName">
                    </label>
                </div>

                <div class="field">
                    <label for="adyen-encrypted-form-cvc">
                        CVC
                        <input type="text" id="adyen-encrypted-form-cvc" value="737" size="4" autocomplete="off" data-encrypted-name="cvc">
                    </label>
                </div>

                <div class="field">
                    <label for="adyen-encrypted-form-expiry-month">
                        Expiration Month (MM)
                        <input type="text" value="06" id="adyen-encrypted-form-expiry-month" size="2" autocomplete="off" data-encrypted-name="expiryMonth"> /
                    </label>
                    <label for="adyen-encrypted-form-expiry-year">
                        Expiration Year (YYYY)
                        <input type="text" value="2016" id="adyen-encrypted-form-expiry-year" size="4" autocomplete="off" data-encrypted-name="expiryYear">
                    </label>
                </div>

                <div class="field">
                    <input type="hidden" id="adyen-encrypted-form-expiry-generationtime" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssK")" data-encrypted-name="generationtime">
                    <input type="submit" value="Create payment">
                </div>
            </fieldset>
        </form>

        <script type="text/javascript" src="../../js/adyen.encrypt.min.js"></script>
        <script type="text/javascript">
            var form = document.getElementById('adyen-encrypted-form');

            // Put your WS users' CSE key here
            // Adyen CA -> Settings -> Users -> Choose the WS user -> Copy CSE key
            var key = "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE"
                    + "YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE-YOUR-KEY-HERE";

            adyen.encrypt.createEncryptedForm(form, key, {});
        </script>
    </body>
    </html>
}