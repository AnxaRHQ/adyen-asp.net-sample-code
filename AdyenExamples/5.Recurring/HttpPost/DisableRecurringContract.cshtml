@using System.Net.Http;

@*
    * Disable recurring contract (HTTP Post)
    *
    * Disabling a recurring contract (detail) can be done by calling the disable action on the Recurring service with a
    * request. This file shows how you can disable a recurring contract using HTTP Post.
    *
    * Please note: using our API requires a web service user. Set up your Webservice user:
    * Adyen CA >> Settings >> Users >> ws@Company. >> Generate Password >> Submit
    *
    * @link /5.Recurring/HttpPost/DisableRecurringContract.cshtml
    * @author Created by Adyen - Payments Made Easy
*@

@{
    /**
     * HTTP Post settings
     * - apiUrl: URL of the Adyen API you are using (Test/Live)
     * - wsUser: your web service user
     * - wsPassword: your web service user's password
     */
    string apiUrl = "https://pal-test.adyen.com/pal/adapter/httppost";
    string wsUser = "YourWSUser";
    string wsPassword = "YourWSPassword";

    /**
     * Create HTTP Client (using Microsoft.Net.Http library) and set up Basic Authentication
     */
    var httpClientHandler = new HttpClientHandler();
    httpClientHandler.Credentials = new NetworkCredential(wsUser, wsPassword);
    var httpClient = new HttpClient(httpClientHandler);

    /**
     * The recurring details request should contain the following variables:
     * 
     * - action                       : Recurring.disable
     * - recurringDetailsRequest
     *   - merchantAccount            : Your merchant account.
     *   - shopperReference           : The reference to the shopper. This shopperReference must be the same as the
     *                                  shopperReference used in the initial payment.
     *   - recurringDetailReference   : The recurringDetailReference of the details you wish to disable. If you do
     *                                  not supply this field all details for the shopper will be disabled including
     *                                  the contract! This means that you can not add new details anymore.
     */
    var values = new List<KeyValuePair<string, string>>
    {
        new KeyValuePair<string, string>("action", "Recurring.disable"),
        new KeyValuePair<string, string>("disableRequest.merchantAccount", "YourMerchantAccount"),
        new KeyValuePair<string, string>("disableRequest.shopperReference", "TheShopperReference"),
        new KeyValuePair<string, string>("disableRequest.recurringDetailReference", "TheDetailReferenceOfTheContract")
    };

    /**
     * Send the HTTP Post request with the specified variables.
     */
    HttpResponseMessage response = httpClient.PostAsync(apiUrl, new FormUrlEncodedContent(values)).Result;
    string responseString = response.Content.ReadAsStringAsync().Result;

    /**
     * Keep in mind that you should handle errors correctly.
     * If the Adyen platform does not accept or store a submitted request, you will receive a HTTP response with
     * status code 500 Internal Server Error. The fault string can be found in the responseString.
     */
    if (!response.IsSuccessStatusCode)
    {
        if (response.StatusCode == HttpStatusCode.InternalServerError)
        {
            throw new HttpException((int)response.StatusCode, responseString);
        }
        else
        {
            throw new HttpException((int)response.StatusCode, response.ReasonPhrase);
        }
    }

    /**
     * The response will be a result object with a single field response. If a single detail was disabled the value
     * of this field will be [detail-successfully-disabled] or, if all details are disabled, the value is
     * [all-details-successfully-disabled].
     */
    var recurringResult = HttpUtility.ParseQueryString(responseString);
        
    <p><strong>Disable Recurring Result</strong></p>
    <ul>
        <li>response: @recurringResult["disableResult.response"]</li>
    </ul>
}